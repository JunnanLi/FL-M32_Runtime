
Allocating common symbols
Common symbol       size              file

timer_irq_count     0x4               obj/main.o
recv_cnt            0x4               obj/main.o
dma_recv_cnt        0x4               obj/main.o
dma_send_cnt        0x4               obj/main.o
send_cnt            0x4               obj/main.o

Memory Configuration

Name             Origin             Length             Attributes
ram              0x0000000000000000 0x0000000000010000 axrwl
ram_data         0x0000000000010000 0x0000000000010000 axrwl
*default*        0x0000000000000000 0xffffffffffffffff

Linker script and memory map

                0x0000000000000180                PROVIDE (__boot_address, 0x180)
                0x0000000000001000                __stack_size = DEFINED (__stack_size)?__stack_size:0x1000
                [!provide]                        PROVIDE (__stack_size, __stack_size)

.vectors        0x0000000000000000      0x100
                0x0000000000000000                PROVIDE (__vector_start, .)
 *(.vectors)
 .vectors       0x0000000000000000      0x100 obj/vectors.o

.init           0x0000000000000180       0x28
 *(SORT(.init))
 *(.text.start)
 .text.start    0x0000000000000180       0x28 obj/crt0.o
                0x0000000000000180                _start

.text           0x00000000000001a8      0x944
 *(.text.unlikely .text.*_unlikely .text.unlikely.*)
 *(.text.exit .text.exit.*)
 *(.text.startup .text.startup.*)
 .text.startup  0x00000000000001a8       0x9c obj/main.o
                0x00000000000001a8                main
 *(.text.hot .text.hot.*)
 *(.text .stub .text.* .gnu.linkonce.t.*)
 .text          0x0000000000000244        0x0 obj/main.o
 .text          0x0000000000000244      0x41a obj/system.o
                0x0000000000000244                print_chr
                0x000000000000024c                print_str
                0x000000000000025e                print_dec
                0x0000000000000294                print_hex
                0x00000000000003c8                print_void
                0x00000000000003ca                printf
                0x00000000000003e8                sys_gettime
                0x00000000000003fa                memcpy
                0x0000000000000412                memset
                0x0000000000000424                memcmp
                0x0000000000000448                memmove
                0x0000000000000488                strnlen
                0x00000000000004a2                strlen
                0x00000000000004b4                strcpy
                0x000000000000052e                strcmp
                0x00000000000005d8                strncmp
                0x0000000000000606                atoi
 .text          0x000000000000065e       0xe8 obj/irq.o
                0x000000000000065e                uart_echo
                0x000000000000069a                uart_irq_handler
                0x000000000000069c                dma_irq_handler
                0x00000000000006bc                time_irq_handler
                0x00000000000006d4                irq_puts
                0x00000000000006e0                mstatus_enable
                0x0000000000000702                mstatus_disable
                0x0000000000000728                irq_init
 .text          0x0000000000000746       0x5c obj/netif.o
                0x0000000000000746                rv_recv
                0x000000000000077e                rv_send
 .text          0x00000000000007a2        0x0 obj/custom_ops.o
 .text          0x00000000000007a2        0x0 obj/crt0.o
 .text          0x00000000000007a2        0x0 obj/vectors.o
 .text.vecs     0x00000000000007a2      0x1e0 obj/vectors.o
 .text          0x0000000000000982      0x16a obj/pktProc.o
                0x0000000000000982                __test_custom_instr
                0x0000000000000a08                __to_recv_pkt
                0x0000000000000a1a                __test_proc_pkt
                0x0000000000000a28                __test_replace_mac
                0x0000000000000a5a                __add_next_512b_first32b_with_1
                0x0000000000000a8c                __to_send_pkt
                0x0000000000000aa6                __test_send_pkt
                0x0000000000000ab4                __read_type
                0x0000000000000abe                __read_next_512b_first32b
 *(.gnu.warning)
                [!provide]                        PROVIDE (__etext, .)
                [!provide]                        PROVIDE (_etext, .)
                [!provide]                        PROVIDE (etext, .)

.rodata         0x0000000000010000      0x108
 *(.rodata .rodata.* .gnu.linkonce.r.*)
 .rodata.str1.4
                0x0000000000010000       0x18 obj/main.o
 .rodata.str1.4
                0x0000000000010018       0x11 obj/system.o
 *fill*         0x0000000000010029        0x3 
 .rodata.str1.4
                0x000000000001002c       0x1c obj/irq.o
 .rodata        0x0000000000010048       0xc0 obj/vectors.o

.rela.dyn       0x0000000000010108        0x0
 .rela.text.startup
                0x0000000000010108        0x0 obj/main.o
 .rela.text     0x0000000000010108        0x0 obj/main.o
 .rela.text.start
                0x0000000000010108        0x0 obj/main.o

.rodata1
 *(.rodata1)
                0x0000000000011108                . = DATA_SEGMENT_ALIGN (CONSTANT (MAXPAGESIZE), CONSTANT (COMMONPAGESIZE))

.data           0x0000000000010108       0x20
                0x0000000000010108                __DATA_BEGIN__ = .
 *(.data .data.* .gnu.linkonce.d.*)
 .data          0x0000000000010108        0x0 obj/main.o
 .data          0x0000000000010108        0x0 obj/system.o
 .data          0x0000000000010108        0x0 obj/irq.o
 .data          0x0000000000010108       0x20 obj/netif.o
                0x0000000000010108                meta_buffer_send
 .data          0x0000000000010128        0x0 obj/custom_ops.o
 .data          0x0000000000010128        0x0 obj/crt0.o
 .data          0x0000000000010128        0x0 obj/vectors.o
 .data          0x0000000000010128        0x0 obj/pktProc.o

.sdata          0x0000000000010128        0x0
                0x0000000000010128                __SDATA_BEGIN__ = .
 *(.srodata.cst16)
 *(.srodata.cst8)
 *(.srodata.cst4)
 *(.srodata.cst2)
 *(.srodata .srodata.*)
 *(.sdata .sdata.* .gnu.linkonce.s.*)
                0x0000000000010128                _edata = .
                [!provide]                        PROVIDE (edata, .)
                0x0000000000010128                . = .
                0x0000000000010128                __bss_start = .

.sbss           0x0000000000010128        0x8
 *(.dynsbss)
 *(.sbss .sbss.* .gnu.linkonce.sb.*)
 .sbss          0x0000000000010128        0x8 obj/irq.o
                0x0000000000010128                mmstatus
                0x000000000001012c                ie_mask32_std
 *(.scommon)

.bss            0x0000000000010130       0x34
 *(.dynbss)
 *(.bss .bss.* .gnu.linkonce.b.*)
 .bss           0x0000000000010130        0x0 obj/main.o
 .bss           0x0000000000010130        0x0 obj/system.o
 .bss           0x0000000000010130        0x0 obj/irq.o
 .bss           0x0000000000010130       0x20 obj/netif.o
                0x0000000000010130                meta_buffer
 .bss           0x0000000000010150        0x0 obj/custom_ops.o
 .bss           0x0000000000010150        0x0 obj/crt0.o
 .bss           0x0000000000010150        0x0 obj/vectors.o
 .bss           0x0000000000010150        0x0 obj/pktProc.o
 *(COMMON)
 COMMON         0x0000000000010150       0x14 obj/main.o
                0x0000000000010150                timer_irq_count
                0x0000000000010154                recv_cnt
                0x0000000000010158                dma_recv_cnt
                0x000000000001015c                dma_send_cnt
                0x0000000000010160                send_cnt
                0x0000000000010164                . = ALIGN ((. != 0x0)?0x4:0x1)
                0x0000000000010164                . = ALIGN (0x4)
                0x0000000000010164                . = SEGMENT_START ("ldata-segment", .)
                0x0000000000010164                . = ALIGN (0x4)
                0x0000000000010164                __BSS_END__ = .
                0x0000000000010164                __bss_end = .
                0x0000000000010908                __global_pointer$ = MIN ((__SDATA_BEGIN__ + 0x800), MAX ((__DATA_BEGIN__ + 0x800), (__BSS_END__ - 0x800)))
                0x0000000000010164                _end = .
                [!provide]                        PROVIDE (end, .)
                0x0000000000010164                . = DATA_SEGMENT_END (.)

.stack          0x0000000000010170     0x1000
                [!provide]                        PROVIDE (__stack_start, .)
                0x0000000000001000                . = __stack_size
 *fill*         0x0000000000010170     0x1000 
                0x0000000000011170                PROVIDE (_sp, .)
                [!provide]                        PROVIDE (__stack_end, .)
LOAD obj/main.o
LOAD obj/system.o
LOAD obj/irq.o
LOAD obj/netif.o
LOAD obj/custom_ops.o
LOAD obj/crt0.o
LOAD obj/vectors.o
LOAD obj/pktProc.o
LOAD /home/lijunnan/Documents/2-software/v1.0.16-pulp-riscv-gcc-ubuntu-18/bin/../lib/gcc/riscv32-unknown-elf/7.1.1/libgcc.a
OUTPUT(obj/firmware.elf elf32-littleriscv)

.comment        0x0000000000000000       0x1a
 .comment       0x0000000000000000       0x1a obj/main.o
                                         0x1b (size before relaxing)
 .comment       0x000000000000001a       0x1b obj/system.o
 .comment       0x000000000000001a       0x1b obj/irq.o
 .comment       0x000000000000001a       0x1b obj/netif.o

.Pulp_Chip.Info
                0x0000000000000000       0x4e
 .Pulp_Chip.Info
                0x0000000000000000       0x4e obj/main.o
 .Pulp_Chip.Info
                0x000000000000004e        0x0 obj/system.o
 .Pulp_Chip.Info
                0x000000000000004e        0x0 obj/irq.o
 .Pulp_Chip.Info
                0x000000000000004e        0x0 obj/netif.o
 .Pulp_Chip.Info
                0x000000000000004e        0x0 obj/custom_ops.o
 .Pulp_Chip.Info
                0x000000000000004e        0x0 obj/crt0.o
 .Pulp_Chip.Info
                0x000000000000004e        0x0 obj/vectors.o
 .Pulp_Chip.Info
                0x000000000000004e        0x0 obj/pktProc.o
